#!/usr/bin/env node

const fs = require("fs");
const util = require("util");
const childProcessExec = require("child_process").exec;

const GIT_GRAFT_CONFIG = require("../../git-graft.json");
const BRANCH_CONTRACT = RegExp(
  `${RegExp(GIT_GRAFT_CONFIG.branchTypes)}${GIT_GRAFT_CONFIG.branchPattern}`
);
const CODE_CONTRACT = RegExp(GIT_GRAFT_CONFIG.branchPattern);

const TIMEOUT_THRESHOLD = 3000;

const exec = util.promisify(childProcessExec);

checkCommitMessage();
hookEscapeHatch(); // Turn this into a bypass with a flag

async function checkCommitMessage() {
  const message = fs.readFileSync(process.argv[2], "utf8").trim();
  let branchName = "";
  try {
    branchName = await getCurrentBranch();
  } catch (e) {
    handleGitBranchCommandError(e);
  }
  // if (!BRANCH_CONTRACT.test(branchName)) {
  //   handleBadBranchName();
  // }
  // if (!CODE_CONTRACT.test(message)) {
  //   handleBadCommitMessage();
  // }
  process.exit(0);
}

async function getCurrentBranch() {
  const branchesOutput = await exec("git branch");
  if (branchesOutput.stderr) {
    throw new Error(branchesOutput.stderr);
  }
  return branchesOutput.stdout
    .split("\n")
    .find((str) => str.trim().charAt(0) === "*")
    .trim()
    .substring(2);
}

function handleGitBranchCommandError(e) {
  console.log(
    `'Error executing "git branch" command' \n`,
    `${e.getMessage()} \n`,
    `----, \n`,
    `Your commit will be rejected. This script will terminate.`
  );
  process.exit(1);
}

function handleBadBranchName() {
  console.log(
    `There is something wrong with your branch name \n`,
    `branch names in this project must adhere to this pattern: ${BRANCH_CONTRACT} \n`,
    `Your commit will be rejected. You should rename your branch to a valid name, based on your configurations check git-graft.json`
  );
  process.exit(1);
}

function handleBadCommitMessage() {
  console.log(
    `There is something wrong with your commit message \n`,
    `it should start with a valid Jira issue code, followed by a dash, thus adhering to this contract: ${CODE_CONTRACT} \n`,
    `your commit will be rejected. Please re-commit your work again with a proper commit message.`
  );
  process.exit(1);
}

function hookEscapeHatch() {
  setTimeout(() => {
    console.log(
      `Git Graft Hook Timeout. If you see this, something bad happened in your pre-commit hook. \n`,
      `Your commit will be rejected.`
    );
    process.exit(1);
  }, TIMEOUT_THRESHOLD);
}
