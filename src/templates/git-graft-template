#!/usr/bin/env node

const fs = require("fs");
const util = require("util");
const childProcessExec = require("child_process").exec;

let gitGraftJSON;
if (!fs.existsSync(`${__dirname}../../git-graft.json`)) {
  gitGraftJSON = {
    branchTypes: "feature|bugfix|hotfix|testing|tests|test",
    branchPattern: "[a-zA-Z]+-[0-9]{1,}-.*",
    ticketTypes: `[a-zA-Z]+`,
    regExFlag: "gim",
    ticketOnly: true,
  };
} else {
  gitGraftJSON = require("../../git-graft.json");
}

const {
  branchTypes,
  branchPattern,
  ticketTypes,
  regExFlag = "gim",
  ticketOnly = true,
} = gitGraftJSON;

const BRANCH_CONTRACT = RegExp(`(${branchTypes})\/${branchPattern}`, regExFlag);
const CODE_COMMIT_CONTRACT = RegExp(branchPattern, regExFlag);
const TICKET_CONTRACT = RegExp(`${ticketTypes}-[0-9]{1,}`);

const TIMEOUT_THRESHOLD = 5000;

const exec = util.promisify(childProcessExec);
const commitMessage = fs.readFileSync(process.argv[2], "utf8").trim();

prependBranchToCommit();
hookEscapeHatch();

async function prependBranchToCommit() {
  let branchName = "";
  try {
    branchName = await getCurrentBranch();
    checkBranchValidity(branchName);
  } catch (e) {
    handleGitBranchCommandError(e);
  }
  const branchOrTicket = ticketOnly
    ? branchName.match(TICKET_CONTRACT)
    : branchName;

  fs.writeFileSync(process.argv[2], `${branchOrTicket}: ${commitMessage}`);
  checkCommitValidity(
    fs.readFileSync(process.argv[2], "utf8").trim(),
    ticketOnly
  );
  process.exit(0);
}

async function getCurrentBranch() {
  const branchesOutput = await exec("git branch");
  if (branchesOutput.stderr) {
    throw new Error(branchesOutput.stderr);
  }
  return branchesOutput.stdout
    .split("\n")
    .find((str) => str.trim().charAt(0) === "*")
    .trim()
    .substring(2);
}

function checkBranchValidity(branchName) {
  if (!BRANCH_CONTRACT.test(branchName)) {
    handleBadBranchName();
  }
}

function checkCommitValidity(commitMessage, isTicket) {
  const checkContract = isTicket ? TICKET_CONTRACT : CODE_COMMIT_CONTRACT;
  if (!checkContract.test(commitMessage)) {
    handleBadCommitMessage();
  }
}

function handleGitBranchCommandError(e) {
  console.log(
    `'Error executing "git branch" command' \n`,
    `${e.getMessage()} \n`,
    `----, \n`,
    `Your commit will be rejected. This script will terminate.`
  );
  process.exit(1);
}

function handleBadBranchName() {
  console.log(
    `There is something wrong with your branch name \n`,
    `branch names in this project must adhere to this pattern: ${BRANCH_CONTRACT} \n`,
    `Your commit will be rejected. You should rename your branch to a valid name, based on your configurations check git-graft.json`
  );
  process.exit(1);
}

function handleBadCommitMessage() {
  console.log(
    `There is something wrong with your commit message. \n`,
    `It should start with a valid JIRA issue code, followed by a dash, thus adhering to this contract: ${CODE_COMMIT_CONTRACT} \n`,
    `your commit will be rejected. Please re-commit your work again with a proper commit message.`
  );
  process.exit(1);
}

function hookEscapeHatch() {
  setTimeout(() => {
    console.log(
      `Git Graft Hook Timeout. If you see this, something bad happened in your pre-commit hook. \n`,
      `Your commit will be rejected.`
    );
    process.exit(1);
  }, TIMEOUT_THRESHOLD);
}
